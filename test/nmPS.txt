Texture2D tex : register(t0);
Texture2D normalTex : register(t1);
SamplerState samplerLinear : register(s0);

cbuffer LightBuffer {
    float3 LightPosition;
    float3 LightColor;
};
struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

float4 PS(PS_INPUT input) : SV_Target0
{
    float3 normal = normalize(input.Normal);
    float3 tangent = normalize(input.Tangent);
    float3 binormal = normalize(cross(input.Normal, tangent));
    float3x3 TBN = float3x3(tangent, binormal, normal);
    float3 mapNormal = normalTex.Sample(samplerLinear, input.TexCoords).xyz;
    mapNormal = mapNormal * 2.0 - 1.0;

    float4 colour = tex.Sample(samplerLinear, input.TexCoords);
    if (colour.a < 0.5)
    {
        discard;
    }
    float3 lightDir = normalize(LightPosition - input.Pos);
    float3 localLightDir = mul(lightDir, transpose(TBN));

    float NdotL = max(0, dot(mapNormal, localLightDir));
    float3 diffuse = LightColor * NdotL;
    float3 ambient = float3(0.9, 0.9, 0.9);
    diffuse = diffuse + ambient;
    float4 diffuseColor = float4(diffuse, 1.0);
    colour = colour / 3.14 * diffuseColor;
    return float4(colour.rgb, 1.0);
}
